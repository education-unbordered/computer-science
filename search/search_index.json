{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Algorithms","text":"<p>This is a collection of algorithms and data structures implemented in Python.</p>"},{"location":"#algorithms","title":"Algorithms","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"about/","title":"About","text":"<p>After working in Software ... </p>"},{"location":"patterns/","title":"Patterns","text":""},{"location":"patterns/#backtracking-2","title":"Backtracking 2","text":"PythonJavaC++ <pre><code>def dfs(start_index, [...additional states]):\n    if is_leaf(start_index):\n        return 1\n    ans = initial_value\n    for edge in get_edges(start_index, [...additional states]):\n        if additional states: \n            update([...additional states])\n        ans = aggregate(ans, dfs(start_index + len(edge), [...additional     states]))\n        if additional states: \n            revert([...additional states])\n    return ans\n</code></pre> <pre><code>private static int dfs(Integer startIndex, List&lt;T&gt; target) {\n    if (isLeaf(startIndex)) {\n        return 1;\n    }\n\n    ans = initialValue;\n    for (T edge : getEdges(startIndex, [...additional states])) {\n        if (additional states) {\n            update([...additional states]);\n        }\n        ans = aggregate(ans, dfs(startIndex + edge.length(), [...  additional states])\n        if (additional states) {\n            revert([...additional states]);\n        }\n    }\n    return ans;\n</code></pre> <pre><code>int dfs(int startIndex, std::vector&lt;T&gt;&amp; target) {\n    if (isValid(target[startIndex:])) {\n        return 1;\n    }\n    int counter = 0;\n    for (auto edge : getEdges(startIndex, [...additional states])) {\n        if (additional states) {\n            update([...additional states]);\n        }\n        ans = aggregate(ans, dfs(startIndex + edge.length(), [...additional states])\n        if (additional states) {\n            revert([...additional states]);\n        }\n}\nreturn ans;\n</code></pre>"}]}